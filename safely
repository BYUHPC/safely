#!/bin/bash



version=0.1.1



# Usage
usage="usage: safely [-h] [-v] [-a] [-w dir ...] [--] command [args ...]

safely runs an arbitrary command while restricting write access to explicitly specified directories. It can allow you to run potentially risky commands in a controlled setting.

Any directory specified with \`-w\` or \`--writable\` can be written in, including subdirectories, but no directories outside of those specified can be modified by the command.

As an example, 'safely --writable /tmp rm -rf $HOME/*' will fail to destroy your home directory, but 'safely --writable $HOME rm -rf $HOME/*' will succeed.

Options:
    -h|--help
        Print this help message

    -v|--version
        Print the version number

    -a|--accept-odd-paths
        Don't reject paths containing ',' or ':' when bind-mounting; incompatible with older apptainer versions

    -w|--writable dir
        Make 'dir' writable by the command"



# Error and warning helpers
error_exit() {
    local retcode="$1"
    local message="$2"
    echo "ERROR: $message" >&2
    echo ======
    echo "$usage" >&2
    echo ======
    echo "ERROR: $message" >&2
    exit "$retcode"
}

warn() {
    echo "WARNING: $@" >&2
}



# Create a pseudo-/dev/null so that it can be made always writable
safely_work_dir="$(mktemp -d -t safely-workdir-XXXXXX)"
pseudo_devnull="$safely_work_dir/devnull"
mkfifo "$pseudo_devnull"
tail -f "$pseudo_devnull" >/dev/null &
devnull_tail_pid=$! # gets killed by the exit trap



# Parse
write_binds=("$pseudo_devnull":/dev/null)
reject_odd_paths=true
unsafe=false
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            echo "$usage"
            exit
            ;;
        -v|--version)
            echo "safely version $version"
            exit
            ;;
        -a|--accept-odd-paths)
            reject_odd_paths=false
            shift
            ;;
        -w|--writable)
            [[ -n "$2" ]] || error_exit 2 "argument for $1 is missing"
            write_binds+=("$(realpath -e "$2")") || error_exit 1 "$2 is not a valid path"
            [[ "$2" = / ]] && unsafe=true
            shift 2
            ;;
        --)
            shift
            break
            ;;
        -*)
            error_exit 2 "unrecognized flag $1"
            ;;
        *)
            break
            ;;
    esac
done
[[ $# -gt 0 ]] || error_exit 2 "command is missing"



# If `/` was given as a writable directory, we can just run the command and exit
if [[ "$unsafe" = true ]]; then
    warn "running without protection since / is writable"
    "$@"
    exit
fi



# Create the pseudo-container and make a cleanup trap
container="$safely_work_dir/container"
mkdir "$container"
trap 'rm -r "$safely_work_dir"; kill "$devnull_tail_pid"' EXIT



# Create symlinks and find read-only binds from mounts and /*
read_binds=()
while read f; do
    ls "$f" &>/dev/null || continue # no need to mount anything we can't see
    if [[ -L "$f" ]]; then
        ln -s "$(realpath "$f")" "${container}${f}"
    else
        if [[ "$reject_odd_paths" == true ]]; then
            [[ "$f" == *,* || "$f" == *:* ]] && warn "not including path with comma or colon $f" && continue
        fi
        f="${f//,/\\,}" # Escape commas in path
        f="${f//:/\\:}" # Escape colons in path
        added=false
        for write_bind in "${write_binds[@]}"; do
            if [[ "$f" == "$write_bind" ]]; then
                added=true
            elif [[ "$f" == "$write_bind"/* ]]; then
                read_binds+=("$f")
                added=true
            fi
        done
        [[ "$added" = true ]] || read_binds+=("$f:$f:ro")
    fi
done < <((df -a --output=target | sed 1d; ls -d /*) | sort -r | uniq | head -n -1)



# Assemble read and write binds
unset bind_list
binds=("${write_binds[@]}" "${read_binds[@]}")
for bind in "${binds[@]}"; do
    bind_list="$bind,$bind_list"
done



# Run
this_dir="$PWD"
cd / # Can't to be in $HOME or --no-home won't work
apptainer --silent exec --no-home --env PATH="$PATH" --pwd "$this_dir" --bind "$bind_list" "$container" "$@"
